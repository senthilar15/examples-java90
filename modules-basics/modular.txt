Modularization :

   Yet another named java platform component  , collection of code and data. Name is reverse dns name same as package name  , not neccessarily package name 
   and module name must be same
  

module-info.java at the root level directory --> module descriptor
  

Why Modularization :


JSR 376: The Java Platform Module System.


1. Strong encapsulation, to allow a component to declare which of its public types are accessible to other components, and which are not.

providing encapsulation at compile time using exports , and at runtime using open on module or at opens inside a module at package level


2. Reliable configuration, to replace the brittle, error-prone class-path mechanism with a means for program components to declare explicit dependences upon one another 



Dependency check at runtime , creates dependency graph at initialization time
    (dependency check  not only at compile time but runtime too)
	
	Eg: remove a dependent jar once compiled , java runtime will check the module-info
	 to build the dependency graph


3. Targetting smaller devices.

	 
How classloader behaves now ?
------------------------------


Module resolution --> process of resolving dependencies by reading "requires" from module-info.java and build a module graph.

requires static --> optional dependency should be available at compile time not needed at runtime, it will not be 
added into module graph as it won't be resolved , to resolve it either another module requires directly or --add-modules has to be done  to make it available in module graph.

NoClassDefFoundError --> throws if requires static depencies not resolved by the above mentioned ways when our code access the portion
	 
Java platform packages itself modularized:
--------------------------------------------

java --list-modules 

describe module
---------------------------------  

java -d java.base

Base module in java.base each module depends /requires module 
	 
Constraints :
--------------

1. Module names must be unique.
2. No duplication of module name allowed in same module path.
3. If two different module path has the same module name , takes the first one and ignores the second.
4. No duplication of packages allowed across modules.



Public is no more public

a. Export + public
b. Qualified Export to package
c. Reflection using open on Module and opens on package
d. implied readability or transitive dependency
e. Qualified open to package




compile time
------------------
export package  
requires module
requires static module

runtime 
--------------

requires module 
requires transitive


Qualified 
-------------------

export <package> to <pakage> --> export this package to a partcular package to 
   increase improved encapsulation. Useful when not ready to export any implementation classes.

Transitive 
-----------------

requires transitive --> export all the packages it requires to module requires it



Runtime by reflection
--------------------------

open module 
module opens pakage


Service loader API
----------------------------------

1. Looks for no-arg constructor or look for a method provider() to create instance.
2. "uses" says what interface using --> needs to be done at consumer module end.
3. "provides" <interface> "with" <class> says that it provides an implementation of particular interface 




Jlink
-------------------------------------



automatic modules
--------------------------------------



Class path vs module path

CP                                                             MP

Locates individual types in each artifacts.     Locates the whole module as a single artifact.


Two different versions of artifact may 
available                                      Avoids duplicate based on module name


Same type with same package may be available 
in two different jars                          Avoids dupliacate packages from multiple modules

Slower as it should scan the classpath         faster as it builds a module graph 
                                               requires , it can directly find module in requires based on
                                               name in module graph




unnamed modules 

----------------------------

When module system cannot find class from module path , it falls back on classpath to load the type. This type will become a part of 
unnamed module , unnamed module can read all the exported  packages from named modules and it exports all its packages.

If same package is available in both named and unnamed module , then the class on the unnamed module will be ignored , if we load a 
class available only in the unnamed module then the class will never be loaded as the package contains this class will be ignored by 
module system.


